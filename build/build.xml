<?xml version="1.0"?>
<project name="jwplayer" basedir="../" default="build-all">
	<!-- Define variables/paths used in this build script -->
	<property file="./build/build.properties" />
	<property environment="env" />

	<!--
		 Have you edited the properties file to make sure the paths are right on your system?
	-->
	<target name="check-properties">
		<fail unless="compc.exe">The "compc.exe" property must be set in ${build.dir}/build.properties.</fail>
		<fail unless="mxmlc.exe">The "mxmlc.exe" property must be set in ${build.dir}/build.properties.</fail>
	</target>

	<target name="clean-assets">
		<exec executable="svn" failonerror="true" failifexecutionfails="true" dir="${debug.dir}">
			<arg line="revert jwplayer.flash.swf jwplayer.html5.js jwplayer.js" />
		</exec>
		<exec executable="svn" failonerror="true" failifexecutionfails="true" dir="${release.dir}">
			<arg line="revert jwplayer.flash.swf jwplayer.html5.js jwplayer.js" />
		</exec>
	</target>
	

	<target name="minify-skin">
        <exec executable="python" outputproperty="minifiedSkin">
            <arg file="${basedir}/build/skin-packer.py" />
            <arg line="assets/six.xml" />
        </exec>
        
        <replaceregexp file="${basedir}/src/js/html5/jwplayer.html5.defaultskin.js"
			match="var text = '(.*)'\;?"
			replace="var text = '${minifiedSkin}'\;"
		/>
	</target>

	<target name="build-js">
        <exec executable="npm" dir="${basedir}" failonerror="true">
            <arg line="install" />
        </exec>
        <exec executable="grunt" dir="${basedir}" failonerror="true"></exec>
	</target>
	
	<!--
		 Compile the player in debug mode.
	-->
	<target name="debug-flash" depends="check-properties">
		<antcall target="build-swf">
			<param name="swf" value="jwplayer.flash" />
			<param name="class" value="${application.class}" />
			<param name="package" value="${application.package}" />
			<param name="debug" value="true" />
			<param name="increment" value="true"/>
			<param name="outputPath" value="${debug.dir}"/>
		</antcall>
	</target>

	<target name="release-flash">
		<antcall target="build-swf">
			<param name="swf" value="jwplayer.flash" />
			<param name="class" value="${application.class}" />
			<param name="package" value="${application.package}" />
			<param name="optimize" value="true" />
			<param name="outputPath" value="${release.dir}"/>
		</antcall>
	</target>
	
	
	<target name="build-swf" depends="get-revision">
		<condition property="debugLine" value="-debug=true" else="">
			<isset property="debug" />
		</condition>
		<condition property="optimizeLine" value="-optimize=true" else="">
			<isset property="optimize" />
		</condition>
		<condition property="incrementLine" value="-incremental=true" else="">
			<isset property="increment" />
		</condition>
		
		<property name="version" value='"${application.majorversion}.${application.minorversion}.${jwplayer.version}"' />
		
		<exec executable="${mxmlc.exe}" dir="${basedir}" failonerror="true">
			<!-- Point to the main class .as file -->
			<arg line="'${src.dir}/${package}/${class}.as'" />

			<!-- Place the built .swf file in the "bin" directory -->
			<arg line="-output '${outputPath}/${swf}.swf'" />

			<!-- Define source directories for "src" and "tests" -->
			<arg line="-compiler.source-path '${src.dir}'" />

			<!-- Include the necessary framework libraries in the class path -->
			<arg line="-compiler.library-path '${flexsdk.lib.dir}'" />

			<arg line="-default-background-color=0x000000" />

			<!-- Enable incremental compilation - this seems to break embedded assets (Flex 4.6) -->
			<!--arg line="${incrementLine}" /-->

			<!-- Needed for Flex 4.x -->
			<arg line="-static-link-runtime-shared-libraries=true" />

			<!-- Optimize for size -->
			<arg line="${optimizeLine}" />

			<!-- Target a minimum flash player -->
			<arg line="-target-player=${flexsdk.target}" />

			<!-- Compile with network sandbox -->
			<arg line="-use-network=false" />

			<!-- Ignore missing type definitions -->
			<arg line="-warnings=false" />

			<!-- Enable debugging -->
			<arg line="${debugLine}" />
			
			<!-- Player version -->
			<arg line="-define=JWPLAYER::version,'${version}'"/>

		</exec>
	</target>

    <!--
        The next two targets only need to exist until the commercial build
        is updated to use build-js target instead of debug-js target
    -->
    <target name="debug-js">
        <antcall target="build-js" />
    </target>
    <target name="release-js">
        <antcall target="build-js" />
    </target>

	<target name="build-all">
		<antcall target="build-js" />
		<antcall target="debug-flash" />
		<antcall target="release-flash" />
	</target>

	<target name="get-revision">
        <condition property="revision" value="${env.BUILD_NUMBER}" else="0">
			<isset property="env.BUILD_NUMBER" />
		</condition>
		
		<condition property="jwplayer.version" value="${revision}" else="????">
			<isset property="revision" />
		</condition>
		
		<echo message="free ${application.majorversion}.${application.minorversion}.${jwplayer.version}"/>
	</target>
	

	
	<!-- Clean out a directory -->
	<target name="clean-dir">
		<delete dir="${clean-directory}" />
		<mkdir dir="${clean-directory}" />
	</target>
	
	<!--
		 Builds the player code library used by plugins
	-->
	<target name="build-lib" depends="get-revision">
		<!-- Clean the SDK directory -->
		<antcall target="clean-dir">
			<param name="clean-directory" value="${sdk.dir}"/>
		</antcall>
		
		<property name="version" value='"${application.majorversion}.${application.minorversion}.${jwplayer.version}"' />
		
		<!-- Build the library SWC -->
		<exec executable="${compc.exe}" dir="${src.dir}" failonerror="true">
			<arg line="-source-path ." />
			<arg line="-output '${sdk.dir}/lib/jwplayer-6-lib.swc'" />
			<!-- Include the necessary framework libraries in the class path -->
			<arg line="-compiler.library-path '${flexsdk.lib.dir}'" />
			<!-- Target Flash Player -->
			<arg line="-target-player=${flexsdk.target}" />
			<arg line="-include-classes com.longtailvideo.jwplayer.player.Player" />
			<!-- Player version -->
			<arg line="-define=JWPLAYER::version,'${version}'"/>
		</exec>
		
	</target>

</project>